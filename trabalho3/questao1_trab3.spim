.data
 
n: .asciiz "\n"
incorreta: .asciiz "entrada incorreta"
bit_paridade: .asciiz "bit-paridade: "
saida: .asciiz "saida: "

.text
.globl main

main:

li  $v0, 5          
syscall
move $s2,$v0


slti $t0,$s2,128
beq $t0,0,entrada_incorreta

slti $t0,$s2,0
beq $t0,1,entrada_incorreta

addi $s5,$0,0
addi $s4,$0,0

move $a2,$s2

addi $s0,$s0,1
addi $s1,$0,0

conta_bits:

beq $s4, 7, sai_do_loop

and $t0, $a2, 1 
beq $t0, 1, incrementa

srl $a2, $a2, 1 
addi $s4, $s4, 1

j conta_bits


incrementa:
addi $s5, $s5, 1
srl $a2, $a2, 1 
addi $s4, $s4, 1


j conta_bits

sai_do_loop:

and $t5,$s5,1
bne $t5,1,par

la $a0, bit_paridade
li $v0, 4
syscall		
		
move $a0,$s0 
li $v0, 1
syscall
		
la $a0,n
li $v0, 4 
syscall 

addi $s2,$s2,128

la $a0, saida
li $v0, 4
syscall

move $a0,$s2	
li $v0,1	
syscall		

j exit

par:

la $a0, bit_paridade
li $v0, 4
syscall		
		
move $a0,$s1 
li $v0, 1
syscall
		
la $a0,n
li $v0, 4 
syscall 

la $a0, saida
li $v0, 4
syscall

move $a0,$s2	
li $v0,1	
syscall		


j exit

entrada_incorreta:

la $a0, incorreta
li $v0, 4 
syscall 

la $a0,n
li $v0, 4 
syscall 


li $v0,10
syscall 

exit:

la $a0,n
li $v0, 4 
syscall 

li $v0,10
syscall 
